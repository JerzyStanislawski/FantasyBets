@page "/"
@using FantasyBets.Data
@using FantasyBets.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<DataContext> DbContextFactory
@inject NavigationManager NavigationManager;
@inject Configuration Config;

<PageTitle>Index</PageTitle>

<div class="center">
    <h2>
        @if (roundNumber > 1)
        {
            <a href="" @onclick="PreviousRound" @onclick:preventDefault>&#9204;</a>
        }
        Round @roundNumber, @String.Format("{0:00}", round.StartTime.Day) - @round.EndTime.ToShortDateString()
        @if (roundNumber < roundsInSeason.Count())
        {
            <a href="" @onclick="NextRound" @onclick:preventDefault>&#9205;</a>
        }
    </h2>    
</div>

@foreach (var day in groupedGames)
{
    <h4 class="offset-md-1">@day.Key.DayOfWeek.ToString()</h4>
    <ul class="offset-md-2">
        @foreach (var game in day)
        {
            <li>
                <a href="/odds-@game.Code">
                    <div class="data-row col-md-8">
                        <div class="data-side">
                            <div class="data-time">@game.Time.ToShortTimeString()</div>
                            <div class="data-home-team">
                                <span>@game.HomeTeam.Name</span>
                                <img srcset="@game.HomeTeam.LogoUrl" width="40" height="40">
                            </div>
                        </div>
                        <div class="data-center">vs</div>
                        <div class="data-side">
                            <div class="data-away-team">
                                <img srcset="@game.AwayTeam.LogoUrl" width="40" height="40">
                                <span>@game.AwayTeam.Name</span>
                            </div>
                        </div>
                    </div>
                </a>
            </li>
        }
    </ul>
}

@code {
    IEnumerable<IGrouping<DateTime, Game>> groupedGames = null!;
    Round round = null!;
    int roundNumber;
    IEnumerable<Round> roundsInSeason = null!;

    protected override async Task OnInitializedAsync()
    {
        GlobalLock.Wait();

        await LoadRound();

        await base.OnInitializedAsync();
    }

    private async Task LoadRound()
    {        
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var roundsInSeasonQueryable = dbContext.Rounds!
            .Include(x => x.Season)
            .Where(x => x.Season.Code == Config.CurrentSeasonCode);
        roundsInSeason = roundsInSeasonQueryable.ToList();

        if (roundNumber == 0)
        {
            var nextRound = roundsInSeasonQueryable.OrderBy(x => x.StartTime).First(x => x.EndTime.Date >= DateTime.Now.Date);
            roundNumber = nextRound.Number;
        }

        round = roundsInSeasonQueryable
            .Include(x => x.Games).ThenInclude(x => x.HomeTeam)
            .Include(x => x.Games).ThenInclude(x => x.AwayTeam)
            .First(x => x.Number == roundNumber);

        groupedGames = round.Games
            .OrderBy(x => x.Time)
            .GroupBy(x => x.Time.Date);
    }

    private async Task NextRound()
    {
        roundNumber++;
        await LoadRound();
        StateHasChanged();
    }

    private async Task PreviousRound()
    {
        roundNumber--;
        await LoadRound();
        StateHasChanged();
    }
}