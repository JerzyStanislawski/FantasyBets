@using FantasyBets.Data
@using FantasyBets.Services

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject UserManager<FantasyUser> UserManager
@inject IDbContextFactory<DataContext> DbContextFactory

<PageTitle>FantasyBets</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <span>@user!.Identity!.Name</span>
            <a href="/Identity/Account/Logout">Logout</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{
    [CascadingParameter] 
    protected Task<AuthenticationState> AuthStat { get; set; } = null!;
    System.Security.Claims.ClaimsPrincipal user = null!;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        if (AuthStat is null)
            throw new InvalidOperationException("Could not load authentication state.");;

        user = (await AuthStat).User;
        if (user is null || user.Identity is null)
            throw new InvalidOperationException("Could not get user identity.");
                    
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/Identity/Account/Login");
        }
                
        var id = UserManager.GetUserId(user);

        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        StateContainer.CurrentUser = await dbContext.Users
            .Include(x => x.BetSelections)
            .ThenInclude(x => x.BetType)
            .Include(x => x.BetSelections)
            .ThenInclude(x => x.Game)
            .ThenInclude(x => x.Round)
            .ThenInclude(x => x.Season)
            .FirstAsync(x => x.Id == id);
    }
}