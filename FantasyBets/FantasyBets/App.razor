@using FantasyBets.Data
@using FantasyBets.Logic.Parsers

@inject IDbContextFactory<DataContext> DbFactory
@inject IHttpClientFactory HttpClientFactory;
@inject RoundParser RoundParser;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {

    protected override async Task OnInitializedAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        if (await db.Database.EnsureCreatedAsync())
        {
            var response = await HttpClientFactory.CreateClient().GetAsync("https://feeds.incrowdsports.com/provider/euroleague-feeds/v2/competitions/E/seasons/E2022/games?teamCode=&phaseTypeCode=RS&roundNumber=1");
            var roundPayload = await response.Content.ReadAsStringAsync();
            var round = await RoundParser.Parse(roundPayload);

            db.Rounds!.Add(round);
            await db.SaveChangesAsync();
        }
    }
}